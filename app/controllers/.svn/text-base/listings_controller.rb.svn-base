class ListingsController < ApplicationController
  before_filter :login_required, :except => [:index2, :index3, :show, :update_add_to_cart, :results, :autocomplete_search]
  protect_from_forgery :except => [:autocomplete_search]
    

# GET /listings
# GET /listings.xml
def index
  seller = Seller.find(self.current_user.seller.id)
  page = params[:page] || 1
  @listings = seller.listings.paginate(:page => page, :per_page => 10,:conditions => ["nr_of_items_in_stock >= ? and removed = ? and creation = ?", "0", "0", "completed"])
  
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")  
  @l2_link = listings_path 
  @l2_name = t("controllers.listings.s2")
  
  respond_to do |format|
    format.html # index.html.erb
    format.xml  { render :xml => @listings }
  end
end

# GET /listings
# GET /listings.xml
def index2
  if params[:search]
  @search = Search.new(params[:search])
  search = Listing.search(:name_like => params[:search][:name], :seller_user_login_like => params[:search][:seller], :removed_eq => "0", :creation_eq => "completed", :nr_of_items_in_stock_gt => 0)  
  @listings = search.all 
  @number_of_results = @listings.size
  #Will paginate has to be used on the @tickets object, not on the local search objects above!
  @listings = @listings.paginate(:page => params[:page])
  @nosearch = 0
else
  @nosearch = 1
  @search = Search.new
end
      
  #Holy stuff, don't touch it or it might break!
  if params[:category_id]
    @cat = params[:category_id].to_i
    if @cat >= 11 or @cat < 1
      @cat = 1
    end
  else
    @cat = 1
  end
  @category = Category.find(@cat)
  @l2_name = t(@category.name)  
  @l2_link = overview_path(:category_id => @category.id)
  @subcategories = Subcategory.find(:all, :conditions => ["category_id = ?", @cat])
  search = Listing.search(:category_id_eq => @cat, :removed_eq => "0", :nr_of_items_in_stock_gt => "0", :creation_eq => "completed")
  if params[:subcategory_id]
    @subcat = params[:subcategory_id].to_i
    @subcategory = Subcategory.find(@subcat)
    @lastcategories = Lastcategory.find(:all, :conditions => ["subcategory_id = ?", @subcat])
    @l3_name = t(@subcategory.name)
    @l3_link = overview_path(:category_id => @category.id, :subcategory_id => @subcategory.id)
    search = Listing.search(:category_id_eq => @cat, :subcategory_id_eq => params[:subcategory_id], :removed_eq => "0", :nr_of_items_in_stock_gt => "0", :creation_eq => "completed")
  end
  if params[:lastcategory_id]
    @lastcat = params[:lastcategory_id].to_i
    @lastcategory = Lastcategory.find(@lastcat)
    @l4_name = t(@lastcategory.name)
    @l4_link = overview_path(:category_id => @category.id, :subcategory_id => @subcategory.id, :lastcategory_id => @lastcategory.id)
    search = Listing.search(:category_id_eq => @cat, :subcategory_id_eq => params[:subcategory_id], :lastcategory_id_eq => params[:lastcategory_id], :removed_eq => "0", :nr_of_items_in_stock_gt => 0, :creation_eq => "completed")
  end
  @listings = search.all
  @all_listings = Listing.find(:all, :conditions => ["removed = ? and creation = ? and nr_of_items_in_stock >= ?", "0", "completed", 1])
  @number_of_results = @listings.size
  @listings = @listings.reverse!
  @listings = @listings.paginate(:per_page => 12, :page => params[:page], :order => 'id DESC')
  @topsellers = Listing.all(:limit => 4)    
  #Breadcrumbs
  @l1_name = t("controllers.listings.s3")
  @l1_link = overview_path
  #l2 are defined above

  respond_to do |format|
    format.html # index2.html.erb
    format.xml  { render :xml => @listings }
  end
end

# GET /listings
# GET /listings.xml
#Search results
def index3
  if params[:search]
  @search = Search.new(params[:search])
  @search.save
  #The below is the perfect search
 
  #AWESOME! Check the polymorphic search with joins as in "seller_user_login_like => @search.seller". Impressive!
  search = Listing.search(:removed_eq => "0",
                          :nr_of_items_in_stock_gt => 0,
                          :creation_eq => "completed",
                         :category_id_eq => @search.category_id,
                         :title_like => @search.name,
                         :price_gt => @search.min_price,
                         :price_lt => @search.max_price,
                         :description_like => @search.description,
                         :category_tag_like => @search.other_tags,
                         :seller_user_login_like => @search.seller,
                         :material_tag_like => @search.material_tags
                         )
  @listings =  search.all

  
  @number_of_results = @listings.size   
  @search.category_id = params[:search][:category_id].to_i
  @search.subcategory_id = params[:search][:subcategory_id].to_i
else
  @nosearch = 1
  @listings = Listing.find(:all,
                             :conditions => ["category_id = ?", 1])
  @search = Search.new(params[:search])
end
  @categories = Category.all
  @categories.each do |s|
      s.name = t(s.name) 
  end  
  #Should load depending on category. Select the ajax update from the new listing page.
  @subcategories = Subcategory.all  
  @subcategories.each do |s|
      s.name = t(s.name) 
  end 
  @listings = @listings.paginate(:per_page => 12, :page => params[:page])
      
   #Define breadcrumbs
  @l1_link = listings_path
  @l1_name = t("controllers.listings.s3")
  
  respond_to do |format|
    format.html # index2.html.erb
    format.xml  { render :xml => @listings }
  end
end

# GET /listings
# GET /listings.xml
#Out of Stock
def index4 
  seller = Seller.find(self.current_user.seller.id)
  @listings = seller.listings.find(:all,
                                   :conditions => ["nr_of_items_in_stock = ? and removed = ? and creation = ?", 0, "0", "completed"])
  
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")    
  @l2_link = seller_listings_path 
  @l2_name = t("controllers.listings.s4")
  respond_to do |format|
    format.html # index.html.erb
    format.xml  { render :xml => @listings }
  end
end

# GET /listings/1
# GET /listings/1.xml
def show #Should show the item depending on the requested item, not on the current user!
  begin
  @listing = Listing.find(:first, :conditions => ["id = ? and removed = ? and creation = ?", params[:id], "0", "completed"])
    if !self.current_user.blank?
    @favorite = Favorite.find(:first, :conditions => ["user_id = ? and listing_id = ?", self.current_user.id, @listing.id])
    @hearted = Hearted.find(:first, :conditions => ["user_id = ? and listing_id = ?", self.current_user.id, @listing.id])
    end                           
    @listings = Listing.find(:all, :conditions => ["seller_id = ? and id != ? and removed = ? and creation = ?", @listing.seller_id, @listing.id, "0", "completed"], :limit => 10)
    logger.info @listings.inspect
    #Select items for the carrousel
    @pictures = []
    @listings.each do |l|   
      @pic = l.pic1.url(:small)
      logger.info "run"
      logger.info @pic.inspect
      @pictures << @pic
    end    
    logger.info @pictures.inspect
    @shop = Shop.find(:first, :conditions => ["seller_id = ?", @listing.seller_id])                         
    @l1_link = listing_overview_path
    @l1_name = "Items"
    @l2_link = listing_path
    if self.current_user
      if self.current_user.is_seller? and self.current_user.seller.id == @listing.seller_id
        @l2_name = "Item " + @listing.id.to_s    
      else
        @l2_name = "Item " + @listing.id.to_s
      end
    end
    @listing.v += 1
    @listing.save
  rescue
     flash[:notice_bad] = t("controllers.listings.s5")
     redirect_to site_path
  else
    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @listing }
    end
  end
end

def edit1
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @user = self.current_user  
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = title_path
  @l2_name = t("controllers.listings.s6") + @listing.id.to_s
end

def update1
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @listing.complete = "step1"
  respond_to do |format|      
    if @listing.update_attributes(params[:listing])
      flash[:notice] = t("controllers.listings.s7")
      format.html { redirect_to seller_listing_url }
      format.xml  { head :ok }
    else
      flash[:notice] = t("controllers.listings.s8")
    end
 end
end

def edit2
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @user = self.current_user   
  #Define breadcrumbs
  @categories = Category.find(:all)
    @categories.each do |s|
    s.name = t(s.name) 
  end
  @subcategories = Subcategory.find(:all, :conditions => ["category_id = ?", @listing.category_id])
  @subcategories.each do |s|
    s.name = t(s.name) 
  end
  
  @lastcategories = Lastcategory.find(:all, :conditions => ["subcategory_id = ?", @listing.subcategory_id])
  @lastcategories.each do |s|
    s.name = t(s.name) 
  end
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = title_path
  @l2_name = t("controllers.listings.s6") + @listing.id.to_s
end

def update2
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @listing.complete = "step2"
  respond_to do |format|      
      if @listing.update_attributes(params[:listing])
        flash[:notice] = t("controllers.listings.s7")
        format.html { redirect_to seller_listing_url }
        format.xml  { head :ok }
      else
        flash[:notice] = t("controllers.listings.s8")
      end
   end
 end
 
  def edit3
    @seller = Seller.find(self.current_user.seller.id)
    @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @user = self.current_user   
  @colors = Color.find(:first, :conditions => ["listing_id = ?", @listing.id])    
  @sizes = Size.find(:first, :conditions => ["listing_id = ?", @listing.id])  
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = title_path
  @l2_name = t("controllers.listings.s6") + @listing.id.to_s
end

def update3
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @listing.complete = "step3"
  @colors = Color.find(:first, :conditions => ["listing_id = ?", @listing.id])    
  @sizes = Size.find(:first, :conditions => ["listing_id = ?", @listing.id])
  
   sizer = 0
  if params[:sizes]
    @all_sizes = params[:sizes]
    @all_sizes.each do |x,y|
      if y == "1"
        sizer += 1
      end
    end
    if sizer == 0
     params[:sizes][:all] = "1"
    end
     @sizes.update_attributes(params[:sizes])
  end
    
  clr = 0      
  if params[:colors]
    @all_colors = params[:colors]
    @all_colors.each do |x,y|
      if y == "1"
        clr += 1
      end
    end
    if clr == 0
      params[:colors][:other] = "1"
    end  
      @colors.update_attributes(params[:colors])
  end
   
  respond_to do |format|      
    if @listing.update_attributes(params[:listing])
     
      flash[:notice] = t("controllers.listings.s7")
      format.html { redirect_to seller_listing_url }
      format.xml  { head :ok }
    else
      flash[:notice] = t("controllers.listings.s8")
        format.html { redirect_to spec_url(@listing.seller, @listing.id) }
    end
  end
end
 
def edit4
    @seller = Seller.find(self.current_user.seller.id)
    @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @user = self.current_user   
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = title_path
  @l2_name = t("controllers.listings.s6") + @listing.id.to_s
end

def update4
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @listing.complete = "step4"
  respond_to do |format|      
      if @listing.update_attributes(params[:listing])
        flash[:notice] = t("controllers.listings.s7")
        format.html { redirect_to seller_listing_url }
        format.xml  { head :ok }
      else
        flash[:notice] = t("controllers.listings.s8")
        format.html { render :action => "edit4" }
          format.xml  { head :ok }
      end
   end
 end
 
def edit5
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @user = self.current_user  
  
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = title_path
  @l2_name = t("controllers.listings.s6") + @listing.id.to_s
end

def update5
  @seller = Seller.find(self.current_user.seller.id)
  @listing = Listing.find(:first, :conditions => ["seller_id = ? and id = ?", @seller.id, params[:id]])
  @user = self.current_user
  @seller = Seller.find(@listing.seller_id)
  @shop = Shop.find(:first,
                    :conditions => ["seller_id = ?", @listing.seller_id]) #Find me the shop settings of that seller so I can use it. Could @seller.shop.whatever also work?
  respond_to do |format|      
    if @listing.update_attributes(params[:listing])
      flash[:notice] = t("controllers.listings.s7")
      format.html { redirect_to seller_listing_url }
      format.xml  { head :ok }
    else
      flash[:notice] = t("controllers.listings.s8")
  end
 end
end

def out_of_stock
@listings = Listing.find(:all,
                          :conditions => ["seller_id = ? and nr_of_items_in_stock = ? and removed = ? ", params[:seller_id], 0, "0"])
end


###Original Update action has been deleted.

# DELETE /listings/1
# DELETE /listings/1.xml
def destroy #Current user only.
  @listing = Listing.find(params[:id])
  @listing.destroy
  

  respond_to do |format|
    format.html { redirect_to(profile_path) }
    format.xml  { head :ok }
  end
end

def remove #Current user only.
  user = User.find(self.current_user.id)
  @listing = user.seller.listings.find(params[:id])
  @listing.removed = 1
  @listing.removed_reason = t("controllers.listings.s9") + Date.today.to_s
  @listing.save
  
  flash[:notice_good] = t("controllers.listings.s10")
  respond_to do |format|
    format.html { redirect_to seller_listings_path(@listing.seller_id) }
    format.xml  { head :ok }
  end
end

def destroy1 #Picture 1
  user = User.find(self.current_user.id)
  @listing = user.seller.listings.find(params[:listing_id])
  @listing.pic1_file_name = nil
  @listing.save
   respond_to do |format|
      format.js
   end
end

def destroy2 #Picture 2
  user = User.find(self.current_user.id)
  @listing = user.seller.listings.find(params[:listing_id])
  @listing.pic2_file_name = nil
  @listing.save
   respond_to do |format|
      format.js
   end
end

def destroy3 #Picture 3
  user = User.find(self.current_user.id)
  @listing = user.seller.listings.find(params[:listing_id])
  @listing.pic3_file_name = nil
  @listing.save
   respond_to do |format|
      format.js
   end
end

def destroy4 #Picture 4
  user = User.find(self.current_user.id)
  @listing = user.seller.listings.find(params[:listing_id])        
  
  @listing.pic4_file_name = nil
  @listing.save
  respond_to do |format|
      format.js
  end
end

 ##################################################
 ########## #Additional Actions after here -> Step 1 to 6 ###########
 ##################################################
  
  # GET /listings/new
  # GET /listings/new.xml
def new #Step1  
@seller_id = self.current_user.seller.id
@test = Listing.find(:first, :conditions => ["creation = ? and seller_id = ?", "incomplete", @seller_id.to_i]) 
@state = "new"  
  if @test != nil
    @listing = @test
#else make a new listing
  else
      @listing = Listing.new
      @listing.quality = "1"
      @listing.removed = 0
      @listing.complete = "no"
      @listing.v = 0
      @listing.nr_of_items_in_stock = 1        
      @listing.seller_id = @seller_id.to_i
      @listing.creation = "incomplete"
      @listing.save  
      @listing.price = "20,99"
      
      @sizes = Size.new
      @sizes.listing_id = @listing.id
      @sizes.all = 1                  
      @sizes.save
      @colors = Color.new
      @colors.listing_id = @listing.id
      @colors.other = 1
      @colors.save
  end
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = new_seller_listing_path
  @l2_name = t("controllers.listings.s11") + @listing.id.to_s + t("controllers.listings.s12")
  respond_to do |format|
    format.html# new.html.erb
    format.xml  { render :xml => @listing }
  end
end

def categories #Step 2
begin   
  @listing = self.current_user.seller.listings.find(:first, :conditions => ["creation = ? and id = ?", "incomplete", params[:listing_id]])
  @seller = Seller.find(@listing.seller_id)
    
  @categories = Category.find(:all)
  #Ensure proper translation before inclusion into collection_select
  @categories.each do |s|
    s.name = t(s.name) 
  end
  if @listing.category_id != "" 
    @listing.category_id = @listing.category_id.to_i
  end  
  if @listing.subcategory_id != "" 
    @listing.subcategory_id = @listing.subcategory_id.to_i
    @subcategories = Subcategory.find(:all,
                                       :conditions => ["category_id = ?", @listing.category_id])
    @subcategories.each do |s|
      s.name = t(s.name) 
    end                                  
  else
     @subcategories = [] # Subcategory.find(:all)
  end 
  if @listing.lastcategory_id != "" 
    @listing.lastcategory_id = @listing.lastcategory_id.to_i
    @lastcategories = Lastcategory.find(:all,
                                       :conditions => ["subcategory_id = ?", @listing.subcategory_id])

    @lastcategories.each do |s|
      s.name = t(s.name) 
    end 
  else
    @lastcategories = [] #Lastcategory.find(:all)
  end  
      
  @listing.complete = "step1" 
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = categories_path
  @l2_name = t("controllers.listings.s11") + @listing.id.to_s + t("controllers.listings.s13")
rescue
  flash[:notice_bad] = t("controllers.listings.s21")
  redirect_to :action => "index"
else
   respond_to do |format|
     if @listing.update_attributes(params[:listing])
        format.html #categories.html.erb
        format.xml  { head :ok }
     else
        format.html { render :action => "new" }
        format.xml  { render :xml => @listing.errors, :status => :unprocessable_entity }
     end
   end
end
end

 def specifics #Step 3
 begin 
    @listing = self.current_user.seller.listings.find(:first, :conditions => ["creation = ? and id = ?", "incomplete", params[:listing_id]])
    
    
    @seller = Seller.find(@listing.seller_id)    
    @categories = Category.find(:all)
    #Ensure proper translation before inclusion into collection_select
    @categories.each do |s|
      s.name = t(s.name) 
    end
    if @listing.category_id != "" 
      @listing.category_id = @listing.category_id.to_i
    end  
    if @listing.subcategory_id != "" 
      @listing.subcategory_id = @listing.subcategory_id.to_i
      @subcategories = Subcategory.find(:all,
                                   :conditions => ["category_id = ?", @listing.category_id])
      @subcategories.each do |s|
      s.name = t(s.name) 
      end                                  
    else
      @subcategories = [] # Subcategory.find(:all)
    end 
    if @listing.lastcategory_id != "" 
      @listing.lastcategory_id = @listing.lastcategory_id.to_i
      @lastcategories = Lastcategory.find(:all,
                                   :conditions => ["subcategory_id = ?", @listing.subcategory_id])

      @lastcategories.each do |s|
        s.name = t(s.name) 
      end 
    else
      @lastcategories = [] #Lastcategory.find(:all)
    end
   @listing.complete = "step2" 
   @sizes = Size.find(:first, :conditions => ["listing_id = ?", @listing.id])
   @colors = Color.find(:first, :conditions => ["listing_id = ?", @listing.id])
   @shop = Shop.find(:first, :conditions => ["seller_id = ?", @listing.seller_id])
   

  #Validation of categories
  
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = specifics_path
  @l2_name = t("controllers.listings.s11")+ @listing.id.to_s + t("controllers.listings.s14")
rescue
  flash[:notice_bad] = t("controllers.listings.s21")
  redirect_to :action => "index"
else
  respond_to do |format|
    if @listing.update_attributes(params[:listing])
      format.html #specifics.html.erb
      format.xml  { head :ok }
    else
      format.html { render :action => "categories" }
      format.xml  { render :xml => @listing.errors, :status => :unprocessable_entity }
    end
  end
end
end  

 def shipping #Step 4#
 begin 
  @listing = self.current_user.seller.listings.find(:first, :conditions => ["creation = ? and id = ?", "incomplete", params[:listing_id]])
  @seller = Seller.find(self.current_user.seller.id)
  @colors = Color.find(:first, :conditions => ["listing_id = ?", @listing.id])    
  @sizes = Size.find(:first, :conditions => ["listing_id = ?", @listing.id])    
  @shop = Shop.find(:first, :conditions => ["seller_id = ?", @listing.seller_id])

  sizer = 0
  if params[:sizes]
    @all_sizes = params[:sizes]
    @all_sizes.each do |x,y|
      if y == "1"
        sizer += 1
      end
    end
    if sizer == 0
     params[:sizes][:all] = "1"
    end
     @sizes.update_attributes(params[:sizes])
  end
    
  clr = 0      
  if params[:colors]
    @all_colors = params[:colors]
    @all_colors.each do |x,y|
      if y == "1"
        clr += 1
      end
    end
    if clr == 0
      params[:colors][:other] = "1"
    end  
      @colors.update_attributes(params[:colors])
  end

  @listing.complete = "step3"
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = shipping_path
  @l2_name = t("controllers.listings.s11") + @listing.id.to_s + t("controllers.listings.s15")
rescue
  flash[:notice_bad] = t("controllers.listings.s21")
  redirect_to :action => "index"
else
  respond_to do |format|
    if @listing.update_attributes(params[:listing]) 
      @listing.country1 = @shop.country1    
      @listing.country1_shipping = @shop.country1_shipping 
      @listing.country1_shipping_with_another_item = @shop.country1_shipping_with_another_item 
      @listing.country1_deliverytime = @shop.country1_deliverytime
      @listing.country2 = @shop.country2    
      @listing.country2_shipping = @shop.country2_shipping 
      @listing.country2_shipping_with_another_item = @shop.country2_shipping_with_another_item 
      @listing.country2_deliverytime = @shop.country2_deliverytime
      @listing.country3 = @shop.country3    
      @listing.country3_shipping = @shop.country3_shipping 
      @listing.country3_shipping_with_another_item = @shop.country3_shipping_with_another_item 
      @listing.country3_deliverytime = @shop.country3_deliverytime
      @listing.country4 = @shop.country4    
      @listing.country4_shipping = @shop.country4_shipping 
      @listing.country4_shipping_with_another_item = @shop.country4_shipping_with_another_item 
      @listing.country4_deliverytime = @shop.country4_deliverytime
      @listing.country5 = @shop.country5    
      @listing.country5_shipping = @shop.country5_shipping 
      @listing.country5_shipping_with_another_item = @shop.country5_shipping_with_another_item 
      @listing.country5_deliverytime = @shop.country5_deliverytime
      format.html #shipping.html.erb
      format.xml  { head :ok }
    else
      format.html { render :action => "specifics" }
      format.xml  { render :xml => @listing.errors, :status => :unprocessable_entity }
    end
  end
end
end

def images  #Step 5
begin
  @listing = self.current_user.seller.listings.find(:first, :conditions => ["creation = ? and id = ?", "incomplete", params[:listing_id]])
  @seller = Seller.find(@listing.seller_id)
  @shop = Shop.find(:first,
                    :conditions => ["seller_id = ?", @listing.seller_id])
  @listing.complete = "step4"
  #Define breadcrumbs
  @l1_link = profile_path
  @l1_name = t("controllers.listings.s1")
  @l2_link = shipping_path
  @l2_name = t("controllers.listings.s11") + @listing.id.to_s + t("controllers.listings.s20")
rescue
  flash[:notice_bad] = t("controllers.listings.s21")
  redirect_to :action => "index"
else  
  respond_to do |format|
    if @listing.update_attributes(params[:listing])
      format.html #images.html.erb
      format.xml  { head :ok }
    else
      format.html { render :action => "shipping" }
        format.xml  { render :xml => @listing.errors, :status => :unprocessable_entity }
      end
    end
end
end

def complete #Current user only.   
begin
  @check_pic = true
  @listing = self.current_user.seller.listings.find(:first, :conditions => ["creation = ? and id = ?", "incomplete", params[:listing_id]])
  @seller = Seller.find(@listing.seller_id)
  @listing.complete = "step5"
  @shop = Shop.find(@listing.seller_id)
rescue
  flash[:notice_bad] = t("controllers.listings.s21")
  redirect_to :action => "index"
else     
  respond_to do |format|
    @listing.creation = "completed"
    if @listing.update_attributes(params[:listing])
      #Movement: Charge the account with 0,20 Euro for listing the item
      @value =  0.20  
      @movement = Movement.new
      @movement.code = 2
      @movement.reason = t("controllers.listings.s16") + @listing.id.to_s + "\">" + @listing.title.to_s + t("controllers.listings.s17")
      @movement.value = @value
      @movement.email = 0
      @movement.dispute = 0      
      @movement.seller_id = @listing.seller_id
      @movement.save
      #Charge seller account balance
      @seller = Seller.find(@listing.seller_id)
      @seller.account_balance += @value
      @seller.save
      flash[:notice_bad] = nil
      flash[:notice_good] = t("controllers.listings.s22")
      format.html { redirect_to(@listing) }
      format.xml  { render :xml => @listing, :status => :created, :location => @listing }
    else
      @listing.errors.add(:images, t("controllers.listings.s18"))
      flash[:notice_bad] = t("controllers.listings.s19")
      format.html { render :action => "images" }
      format.xml  { render :xml => @listing.errors, :status => :unprocessable_entity }
    end      
  end 
end
end

def subcategory #Step 2
  @category_id = params[:sc]
  @subcategory = Subcategory.find(:all,
                                :conditions => ["category_id = ? and locale = ?", @category_id, "en"])
  @sub = []
  @subcategory.each do |s|
    s.name = t(s.name)                                  
  end
                                    
  @listing_id = params[:id]         
  respond_to do |format|
    format.js
  end
end
 
 def lastcategory #Step 2
  @subcategory_id = params[:lc].to_s
  @lastcategory = Lastcategory.find(:all,
                                  :conditions => ["subcategory_id = ? and locale = ?", @subcategory_id.to_i, "en"])
  @lastcategory.each do |s|
    s.name = t(s.name)                                  
  end
  @listing_id = params[:id]         
  respond_to do |format|
    format.js 
  end
end

def update_add_to_cart
  @color = params[:colors].to_s
  @size = params[:sizes]
  @listing = Listing.find(params[:id])     
  render :partial => "update_add_to_cart", :object => @listing
end



#End of Class
end